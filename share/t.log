dfi.F:      ! set chemistry option to zero
dfi.F:      CALL nl_set_chem_opt (grid%id, 0)
dfi.F:!      ! reset chem option to normal
dfi.F:!      CALL nl_set_chem_opt( grid%id, grid%chem_opt)
dfi.F:      ! reset chem option to normal
dfi.F:      CALL nl_set_chem_opt( grid%id, grid%chem_opt)
dfi.F:      ! set chemistry option to zero
dfi.F:      CALL nl_set_chem_opt (grid%id, 0)
interp_fcn.F:        !  This is a simple schematic of the feedback indexing used in the even
mediation_integrate.F:! - Get chemistry data
mediation_integrate.F:     ELSE IF( ialarm .EQ. AUXINPUT5_ALARM .AND. config_flags%chem_opt > 0 ) THEN
mediation_integrate.F:           call wrf_debug(15,' CALL med_read_wrf_chem_emiss ')
mediation_integrate.F:           CALL med_read_wrf_chem_emiss ( grid , config_flags )
mediation_integrate.F:           call wrf_debug(15,' Back from CALL med_read_wrf_chem_emiss ')
mediation_integrate.F:     ELSE IF( ialarm .EQ. AUXINPUT7_ALARM .AND. config_flags%chem_opt > 0 ) THEN
mediation_integrate.F:     ELSE IF( ialarm .EQ. AUXINPUT13_ALARM .AND. config_flags%chem_opt > 0 ) THEN
mediation_integrate.F:   ! Only run it if a non-bulk scheme is in use, since bulk schemes do
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_input ( grid , config_flags )
mediation_integrate.F:      WRITE(message,*)'mediation_integrate: med_read_wrf_chem_input: Open file ',TRIM(inpname)
mediation_integrate.F:           WRITE( message , * ) 'med_read_wrf_chem_input error opening ', TRIM( inpname )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_input: Read chemistry from wrfout at time ',&
mediation_integrate.F:   CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_input: exit' )
mediation_integrate.F:END SUBROUTINE med_read_wrf_chem_input
mediation_integrate.F:!       (Intended for debugging of chem code)
mediation_integrate.F:!       the value "wrfchemi_hhZ_d<domain>". 
mediation_integrate.F:!       "wrfchemi_d<domain>_<date>".
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_emiss ( grid , config_flags )
mediation_integrate.F:            CALL construct_filename1 ( inpname , 'wrfchemi_00z' , grid%id , 2 )
mediation_integrate.F:            WRITE(message,*)'mediation_integrate: med_read_wrf_chem_emissions: Open file ',TRIM(inpname)
mediation_integrate.F:               WRITE( message , * ) 'med_read_wrf_chem_emissions: error opening ', TRIM( inpname )
mediation_integrate.F:            CALL construct_filename1 ( inpname , 'wrfchemi_12z' , grid%id , 2 )
mediation_integrate.F:            WRITE(message,*)'mediation_integrate: med_read_wrf_chem_emissions: Open file ',TRIM(inpname)
mediation_integrate.F:               WRITE( message , * ) 'med_read_wrf_chem_emissions: error opening ', TRIM( inpname )
mediation_integrate.F:            WRITE(message,'(A,A)')'mediation_integrate: med_read_wrf_chem_emissions: Read emissions for time ',TRIM(current_date_char)
mediation_integrate.F:                 WRITE(message,'(A)')'mediation_integrate: med_read_wrf_chem_emissions: Error in emissions time, skipping all times in file '
mediation_integrate.F:                 WRITE(message,'(A,I4)')'mediation_integrate: med_read_wrf_chem_emissions: Skip emissions ',i
mediation_integrate.F:            CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_emissions: Do not read emissions' )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_emissions: Read emissions for time ',TRIM(current_date_char)
mediation_integrate.F:            WRITE(message,*)'mediation_integrate: med_read_wrf_chem_emissions: Open file ',TRIM(inpname)
mediation_integrate.F:               WRITE( message , * ) 'med_read_wrf_chem_emissions: error opening ', TRIM( inpname )
mediation_integrate.F:   CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_emissions: exit' )
mediation_integrate.F:END SUBROUTINE med_read_wrf_chem_emiss
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_bioemiss ( grid , config_flags )
mediation_integrate.F:      CALL construct_filename1 ( inpname , 'wrfbiochemi' , grid%id , 2 )
mediation_integrate.F:      WRITE(message,*)'mediation_integrate: med_read_wrf_chem_bioemissions: Open file ',TRIM(inpname)
mediation_integrate.F:           WRITE( message , * ) 'med_read_wrf_chem_bioemissions: error opening ', TRIM( inpname )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_bioemissions: Read biogenic emissions at time ',&
mediation_integrate.F:   CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_bioemissions: exit' )
mediation_integrate.F:END SUBROUTINE med_read_wrf_chem_bioemiss
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_emissopt4 ( grid , config_flags )
mediation_integrate.F:      CALL construct_filename1 ( inpname , 'wrfchemi' , grid%id , 2 )
mediation_integrate.F:      WRITE(message,*)'mediation_integrate: med_read_wrf_chem_emissions: Open file ',TRIM(inpname)
mediation_integrate.F:           WRITE( message , * ) 'med_read_wrf_chem_emissions: error opening ', TRIM( inpname )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_emissions: Read biogenic emissions at time ',&
mediation_integrate.F:   CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_emissions: exit' )
mediation_integrate.F:END SUBROUTINE med_read_wrf_chem_emissopt4
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_dms_emiss ( grid , config_flags )
mediation_integrate.F:      CALL construct_filename1 ( inpname , 'wrfchemi_dms' , grid%id , 2 )
mediation_integrate.F:      WRITE(message,*)'mediation_integrate: med_read_wrf_chem_dms_emiss: Open file ',TRIM(inpname)
mediation_integrate.F:           WRITE( message , * ) 'med_read_wrf_chem_dms_emiss: error opening ', TRIM( inpname )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_dms_emiss: Read dms reference fields',&
mediation_integrate.F:   CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_dms_emiss: exit' )
mediation_integrate.F:END SUBROUTINE  med_read_wrf_chem_dms_emiss
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_gocart_bg ( grid , config_flags )
mediation_integrate.F:      CALL construct_filename1 ( inpname , 'wrfchemi_gocart_bg' , grid%id , 2 )
mediation_integrate.F:      WRITE(message,*)'mediation_integrate: med_read_wrf_chem_gocart_bg: Open file ',TRIM(inpname)
mediation_integrate.F:           WRITE( message , * ) 'med_read_wrf_chem_gocart_bg: error opening ', TRIM( inpname )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_gocart_bg: Read gocart_bg at time ',&
mediation_integrate.F:   CALL wrf_debug (100 , 'mediation_integrate: med_read_wrf_chem_gocart_bg: exit' )
mediation_integrate.F:END SUBROUTINE  med_read_wrf_chem_gocart_bg
mediation_integrate.F:      CALL construct_filename1 ( inpname , 'wrfchemv' , grid%id , 2 )
mediation_integrate.F:SUBROUTINE med_read_wrf_chem_emissopt3 ( grid , config_flags )
mediation_integrate.F:      CALL construct_filename1 ( inpname , 'wrffirechemi' , grid%id , 2 )
mediation_integrate.F:      WRITE(message,*)'mediation_integrate: med_read_wrf_chem_fireemissions: Open file ',TRIM(inpname)
mediation_integrate.F:           WRITE( message , * ) 'med_read_wrf_chem_fireemissions: error opening ', TRIM( inpname )
mediation_integrate.F:         WRITE(message,*)'mediation_integrate: med_read_wrf_chem_fireemissions: Read fire emissions at time ',&
mediation_integrate.F:   CALL wrf_debug (00 , 'mediation_integrate: med_read_wrf_chem_fireemissions: exit' )
mediation_integrate.F:END SUBROUTINE med_read_wrf_chem_emissopt3
mediation_nest_move.F:! check for CAM radiation scheme , which can not move
mediation_nest_move.F:! check for PX lsm scheme, which can not move
module_check_a_mundo.F:            ! Noah-MP does not work with the urban schemes
module_check_a_mundo.F:               WRITE(wrf_err_message, '(" --- ERROR:   Noah-MP LSM scheme (sf_surface_physics==", I2, ")")') NOAHMPSCHEME
module_check_a_mundo.F:               WRITE(wrf_err_message, '("              does not work with urban physics schemes")')
module_check_a_mundo.F:! PX scheme are enough to allow the surface fdda file to be read.
module_check_a_mundo.F:!  shcu_physics = 3 (grimsshcuscheme) only works with YSU PBL.     
module_check_a_mundo.F:!  shcu_physics = 3 (grimsshcuscheme) only works with YSU PBL.
module_check_a_mundo.F:! For adaptive time stepping, certain physics schemes are not allowed
module_check_a_mundo.F:! to have intermittent frequencies.  So, for those schemes below, we just
module_check_a_mundo.F:! turn the frequencies so that the schemes are called for each time step.
module_check_a_mundo.F:            wrf_err_message = '--- WARNING: If use_adaptive_time_step, must use cudt=0 for the following CU schemes:'
module_check_a_mundo.F:! schemes needs to have the namelist flag cu_diag=1
module_check_a_mundo.F:                wrf_err_message = '--- ERROR: Using cu_diag=1 requires use of one of the following CU schemes:'
module_check_a_mundo.F:                wrf_err_message = '---          Grell (G3) CU scheme' 
module_check_a_mundo.F:                wrf_err_message = '---          Grell-Devenyi (GD) CU scheme' 
module_check_a_mundo.F:! The three Grell cumulus parameterization schemes need to have the 
module_check_a_mundo.F:! namelist flag cu_diag=1, and all other cumulus schemes must have
module_check_a_mundo.F:!  Only implement the TEMF PBL scheme with the TEMP SFCLAY scheme.  
module_check_a_mundo.F:!  The CLM scheme may not even be compiled, so make sure it is not allowed
module_check_a_mundo.F:         wrf_err_message = '--- ERROR: The CLM surface scheme was requested in the namelist.input file.'
module_check_a_mundo.F:         wrf_err_message = '--- ERROR: However, the WRF CLM scheme was not compiled in WRF.'
module_check_a_mundo.F:! Set the namelist parameters for the CAM radiation scheme if either 
module_check_a_mundo.F:! Set the namelist parameters for the RRTMG radiation scheme if either
module_soil_pre.F:                                      scheme , &
module_soil_pre.F:      INTEGER , INTENT(IN) :: num_veg_cat , num_soil_top_cat , num_soil_bot_cat , scheme
module_soil_pre.F:      fix_seaice : SELECT CASE ( scheme )
module_soil_pre.F:                                      scheme , &
module_soil_pre.F:      INTEGER , INTENT(IN) :: num_veg_cat , num_soil_top_cat , num_soil_bot_cat , scheme
module_soil_pre.F:      fix_seaice : SELECT CASE ( scheme )
module_soil_pre.F:                                      scheme , &
module_soil_pre.F:      INTEGER , INTENT(IN) :: num_veg_cat , num_soil_top_cat , num_soil_bot_cat , scheme
module_soil_pre.F:      fix_seaice : SELECT CASE ( scheme )
module_soil_pre.F:                                      scheme , &
module_soil_pre.F:      INTEGER , INTENT(IN) :: num_veg_cat , num_soil_top_cat , num_soil_bot_cat , scheme
module_soil_pre.F:      fix_seaice : SELECT CASE ( scheme )
set_timekeeping.F:! add for wrf_chem emiss input
set_timekeeping.F:! end for wrf chem emiss input
solve_interface.F:   IF ( config_flags%chem_opt > 0  ) THEN
solve_interface.F:     CALL chem_driver  ( grid , config_flags  &
solve_interface.F:   IF ( config_flags%chem_opt > 0  ) THEN
solve_interface.F:     CALL chem_driver  ( grid , config_flags  &
track_driver.F:   CHARACTER (LEN=19) :: chem_name
track_driver.F:!-- output chemical species
track_driver.F:         IF ( model_config_rec%chem_opt(grid%id) > 0 .and. grid%track_chem_num > 0 ) THEN
track_driver.F:           do m= 1,grid%track_chem_num
track_driver.F:            chem_name = TRIM(model_config_rec%track_chem_name(m))
track_driver.F:              do i = 1, num_chem
track_driver.F:                if (chem_name .eq. TRIM(chem_dname_table( grid%id, i ))) then
track_driver.F:                  grid%track_chem(m,n,grid%sm32:grid%em32-1) = grid%chem(ix,grid%sm32:grid%em32-1,iy,i)
track_driver.F:!                 print*,'track_chem_name,pointer = ',chem_name, i
track_driver.F:!                 print*,'track_chem =',grid%track_chem(m,n,grid%sm32:grid%em32-1)
track_driver.F:!-- output chem
track_driver.F:         IF ( model_config_rec%chem_opt(grid%id) > 0 .and. grid%track_chem_num > 0 ) THEN
track_driver.F:           do m= 1,grid%track_chem_num
track_driver.F:            grid%track_chem(m,n,grid%sm32:grid%em32-1) = 1.E30
track_driver.F:   CHARACTER (LEN=19) :: chem_name
track_driver.F:   IF (model_config_rec%chem_opt(grid%id) > 0) THEN
track_driver.F:!--put chem output in grid%track_chem(:,:,:)
track_driver.F:!chem
track_driver.F:   IF ( model_config_rec%chem_opt(grid%id) > 0 .and. grid%track_chem_num > 0 ) THEN
track_driver.F:   ALLOCATE(track_buf3(grid%track_chem_num, grid%track_loc_in, level))
track_driver.F:   track_buf3(:,:,:) = grid%track_chem(:,:,:)
track_driver.F:   CALL wrf_dm_min_reals(track_buf3(:,:,:),grid%track_chem(:,:,:),grid%track_chem_num*grid%track_loc_in*level)
track_driver.F:      IF ( model_config_rec%chem_opt(grid%id) > 0 .and. model_config_rec%phot_opt(grid%id) == 3 ) THEN
track_driver.F:      IF ( model_config_rec%chem_opt(grid%id) > 0 .and. model_config_rec%phot_opt(grid%id) == 3 ) THEN
track_driver.F:      IF ( model_config_rec%chem_opt(grid%id) > 0 .and. grid%track_chem_num > 0 ) THEN
track_driver.F:!chem
track_driver.F:      do m= 1,grid%track_chem_num
track_driver.F:         chem_name = trim(model_config_rec%track_chem_name(m))
track_driver.F:         description = trim(chem_name) // ' concentration'
track_driver.F:         astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_o31d' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_o33p' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_no2' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_hno2' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_hno3' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_h2o2' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'photr_ch3o2h' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 2, var_dim(1:2), var_id )
track_driver.F:      chem_name   = 'radfld' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 3, var_dim(1:3), var_id )
track_driver.F:      chem_name   = 'adjcoe' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 3, var_dim(1:3), var_id )
track_driver.F:      chem_name   = 'phrate' 
track_driver.F:      astat = NF_DEF_VAR(ncid, trim(chem_name), NF_REAL, 3, var_dim(1:3), var_id )
track_driver.F:      IF ( model_config_rec%chem_opt(grid%id) > 0 .and. grid%track_chem_num > 0 ) THEN
track_driver.F:!chem
track_driver.F:      IF ( model_config_rec%chem_opt(grid%id) > 0 .and. grid%track_chem_num > 0 ) THEN
track_driver.F:      do n= 1,grid%track_chem_num
track_driver.F:         chem_name = trim(model_config_rec%track_chem_name(n))
track_driver.F:         astat = NF_INQ_VARID(ncid,trim(chem_name),var_id)
track_driver.F:            astat = NF_PUT_VARA_REAL(ncid,var_id,start(1:2),count(1:2),grid%track_chem(n,m,:))          
track_driver.F:!        write (*,*) 'n, var_id, chem_name = ', n, var_id, trim(chem_name)
