convert_em.F:   CALL       wrf_debug ( 100 , 'convert_em: calling init_modules ' )
convert_em.F:   CALL set_wrf_debug_level ( debug_level )
convert_em.F:   CALL       wrf_debug ( 100 , 'convert_em: calling alloc_and_configure_domain ' )
convert_em.F:   CALL       wrf_debug ( 100 , 'convert_em: calling set_scalar_indices_from_config ' )
convert_em.F:   CALL       wrf_debug ( 100 , 'convert_em: calling model_to_grid_config_rec ' )
convert_em.F:   CALL       wrf_debug ( 100 , 'convert_em: calling init_wrfio' )
convert_em.F:   CALL       wrf_debug ( 100 , 'convert_em: re-broadcast the configuration records' )
ideal_em.F:   CALL set_wrf_debug_level ( debug_level )
ideal_em.F:   CALL       wrf_debug ( 100 , 'wrf: calling model_to_grid_config_rec ' )
ideal_em.F:   CALL       wrf_debug ( 100 , 'wrf: calling set_scalar_indices_from_config ' )
ideal_em.F:   CALL wrf_debug ( 150 , wrf_err_message )
ideal_em.F:   CALL       wrf_debug ( 100 , 'wrf: calling init_wrfio' )
ideal_em.F:   CALL       wrf_debug (   0 , 'wrf: SUCCESS COMPLETE IDEAL INIT' )
ideal_nmm.F:   CALL       wrf_debug ( 100 , 'ideal_hwrf: calling init_modules ' )
ideal_nmm.F:   CALL set_wrf_debug_level ( debug_level )
ideal_nmm.F:   CALL  wrf_debug ( 100 , 'ideal_hwrf: calling alloc_and_configure_domain ' )
ideal_nmm.F:   CALL wrf_debug ( 100 , 'ideal_hwrf: calling set_scalar_indices_from_config ' )
ideal_nmm.F:   CALL     wrf_debug ( 100 , 'ideal_hwrf: calling model_to_grid_config_rec ' )
ideal_nmm.F:   CALL       wrf_debug ( 100 , 'ideal_hwrf: calling init_wrfio' )
ideal_nmm.F:   CALL wrf_debug ( 100 , 'ideal_hwrf: re-broadcast the configuration records' )
ideal_nmm.F:   CALL       wrf_debug (   0 , 'ideal_hwrf: SUCCESS COMPLETE IDEAL_HWRF INIT' )
ideal_nmm.F:       CALL wrf_debug ( 100 , wrf_err_message )
ideal_nmm.F:      CALL wrf_debug (100, 'med_sidata_input: call input_auxinput1_wrf')
ideal_nmm.F:         CALL  wrf_debug (100, 'med_sidata_input: call init_module_optional_input' )
ideal_nmm.F:      CALL wrf_debug ( 100 , 'med_sidata_input: calling optional_input' )
ideal_nmm.F:         CALL  wrf_debug (100, 'med_sidata_input: call init_module_optional_input' )
ideal_nmm.F:      CALL wrf_debug ( 100 , 'med_sidata_input: calling init_domain' )
ideal_nmm.F:      CALL wrf_debug ( 100 , 'med_sidata_input: back from init_domain' )
ideal_nmm.F:  external get_wrf_debug_level
ideal_nmm.F:  call get_wrf_debug_level(debug)
ideal_nmm.F:        CALL wrf_debug(10,message)
ideal_nmm.F:          CALL wrf_debug(10,message)
ideal_nmm.F:     call wrf_debug(1,'LOOP>1, so start making non-init boundary conditions')
ideal_nmm.F:        call wrf_debug(1,'ALLOCATE PREP_HYBRID BOUNDARY ARRAYS')
ideal_nmm.F:                 call wrf_debug(10,message)
ideal_nmm.F:                 call wrf_debug(10,message)
ideal_nmm.F:              call wrf_debug(10,message)
ideal_nmm.F:                    call wrf_debug(10,message)
ideal_nmm.F:                    call wrf_debug(10,message)
ideal_nmm.F:                 call wrf_debug(10,message)
ideal_nmm.F:                       call wrf_debug(10,message)
ideal_nmm.F:                       call wrf_debug(10,message)
ideal_nmm.F:                    call wrf_debug(10,message)
ideal_nmm.F:                       call wrf_debug(10,message)
ideal_nmm.F:                       call wrf_debug(10,message)
ideal_nmm.F:                    call wrf_debug(10,message)
ideal_nmm.F:        call wrf_debug(10,message)
ideal_nmm.F:        call wrf_debug(10,message)
ideal_nmm.F:          CALL wrf_debug(10,message)
ideal_nmm.F:     call wrf_debug(1,'DEALLOCATE PREP_HYBRID BOUNARY ARRAYS')
module_wrf_top.F:! href=wrf_debug.html>wrf_debug</a> throughout the code. Debug_level
module_wrf_top.F:   CALL set_wrf_debug_level ( debug_level )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: calling alloc_and_configure_domain ' )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: calling model_to_grid_config_rec ' )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: calling set_scalar_indices_from_config ' )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: calling init_wrfio' )
module_wrf_top.F:      CALL wrf_debug ( 0 , ' 0 h restart only wrf: SUCCESS COMPLETE WRF' )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: calling integrate' )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: back from integrate' )
module_wrf_top.F:   CALL       wrf_debug ( 100 , 'wrf: back from med_shutdown_io' )
module_wrf_top.F:   CALL       wrf_debug (   0 , 'wrf: SUCCESS COMPLETE WRF' )
ndown_em.F:   CALL       wrf_debug (  99,message )
ndown_em.F:   CALL set_wrf_debug_level ( debug_level )
ndown_em.F:   CALL       wrf_debug ( 100 , 'ndown_em: calling alloc_and_configure_domain coarse ' )
ndown_em.F:   CALL       wrf_debug ( 100 , 'ndown_em: calling model_to_grid_config_rec ' )
ndown_em.F:   CALL       wrf_debug ( 100 , 'ndown_em: calling set_scalar_indices_from_config ' )
ndown_em.F:   CALL       wrf_debug ( 100 , 'ndown_em: calling init_wrfio' )
ndown_em.F:   CALL wrf_debug          ( 100 , 'ndown_em main: calling open_r_dataset for ' // TRIM(eligible_file_name(file_counter)) )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:         CALL       wrf_debug (  99,message )
ndown_em.F:            CALL wrf_debug          ( 100 , 'ndown_em main: calling close_dataset  for ' // TRIM(eligible_file_name(file_counter)) )
ndown_em.F:            CALL wrf_debug      ( 100 , 'ndown_em main: calling open_r_dataset for ' // TRIM(eligible_file_name(file_counter)) )
ndown_em.F:      CALL wrf_debug          ( 100 , 'wrf: calling input_history' )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:      CALL wrf_debug          ( 100 , 'wrf: back from input_history' )
ndown_em.F:         CALL       wrf_debug ( 100 , 'wrf: calling alloc_and_configure_domain fine ' )
ndown_em.F:         CALL       wrf_debug ( 100 , 'wrf: calling model_to_grid_config_rec ' )
ndown_em.F:         CALL       wrf_debug ( 100 , 'wrf: calling set_scalar_indices_from_config ' )
ndown_em.F:         CALL wrf_debug          ( 100 , 'ndown_em main: calling open_w_dataset for wrfinput' )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:      CALL       wrf_debug (  99,message )
ndown_em.F:         CALL       wrf_debug ( 100 , 'med_sidata_input: calling open_r_dataset for ' // TRIM(si_inpname) )
ndown_em.F:         CALL       wrf_debug ( 100 , 'ndown_em: calling input_auxinput2' )
ndown_em.F:         CALL       wrf_debug ( 100 , 'ndown_em: closing fine grid static input' )
ndown_em.F:            CALL wrf_debug          ( 100 , 'ndown_em main: calling open_w_dataset for wrfbdy' )
ndown_em.F:            CALL wrf_debug          ( 100 , 'ndown_em main: calling open_w_dataset for wrfbdy' )
ndown_em.F:   CALL wrf_debug ( 0 , 'ndown_em: SUCCESS COMPLETE NDOWN_EM INIT' )
ndown_em.F:      CALL wrf_debug( 0, 'mismatch in check_consistency, turned to water points, be careful' )
nup_em.F:   CALL set_wrf_debug_level ( debug_level )
nup_em.F:   CALL       wrf_debug ( 100 , 'nup_em: calling alloc_and_configure_domain coarse ' )
nup_em.F:   CALL       wrf_debug ( 100 , 'wrf: calling alloc_and_configure_domain fine ' )
nup_em.F:   CALL wrf_debug ( 0 , 'nup_em: SUCCESS COMPLETE NUP_EM INIT' )
nup_em.F:         CALL       wrf_debug ( 100 , 'med_sidata_input: calling open_r_dataset for ' // TRIM(si_inpname) )
nup_em.F:         CALL       wrf_debug ( 100 , 'nup_em: calling input_aux_model_input2' )
nup_em.F:         CALL       wrf_debug ( 100 , 'nup_em: closing fine grid static input' )
nup_em.F:      CALL wrf_debug( 0, 'mismatch in check_consistency, turned to water points, be careful' )
real_em.F:   CALL       wrf_debug ( 100 , 'real_em: calling init_modules ' )
real_em.F:   CALL set_wrf_debug_level ( debug_level )
real_em.F:   CALL       wrf_debug ( 100 , 'real_em: calling alloc_and_configure_domain ' )
real_em.F:            CALL wrf_debug ( 100 , message )
real_em.F:            CALL wrf_debug ( 100 , message )
real_em.F:         CALL       wrf_debug ( 100 , 'real_em: calling set_scalar_indices_from_config ' )
real_em.F:         CALL       wrf_debug ( 100 , 'real_em: calling model_to_grid_config_rec ' )
real_em.F:         CALL       wrf_debug ( 100 , 'real_em: calling init_wrfio' )
real_em.F:         CALL       wrf_debug ( 100 , 'real_em: re-broadcast the configuration records' )
real_em.F:         CALL       wrf_debug ( 100 , 'calling med_sidata_input' )
real_em.F:         CALL       wrf_debug ( 100 , 'backfrom med_sidata_input' )
real_em.F:   CALL       wrf_debug (   0 , 'real_em: SUCCESS COMPLETE REAL_EM INIT' )
real_em.F:      CALL wrf_debug ( 100 , wrf_err_message )
real_em.F:      CALL wrf_debug ( 100 , 'med_sidata_input: calling input_auxinput1' )
real_em.F:      CALL wrf_debug( 0, wrf_err_message )
real_em.F:         CALL       wrf_debug ( 100 , 'med_sidata_input: calling init_module_optional_input' )
real_em.F:      CALL       wrf_debug ( 100 , 'med_sidata_input: calling optional_input' )
real_em.F:      CALL       wrf_debug ( 100 , 'med_sidata_input: back from init_domain' )
real_em.F:         CALL  wrf_debug (100, 'med_sidata_input: call init_module_optional_input' )
real_em.F:      CALL       wrf_debug ( 100 , 'med_sidata_input: calling init_domain' )
real_em.F:      CALL wrf_debug( 0, wrf_err_message )
real_em.F:      CALL wrf_debug( 0, wrf_err_message )
real_em.F:      CALL wrf_debug( 0, wrf_err_message )
real_em.F:         CALL wrf_debug ( 150 , wrf_err_message )
real_em.F:      CALL wrf_debug ( 150 , wrf_err_message )
real_em.F:      CALL wrf_debug ( 150 , wrf_err_message )
real_em.F:      CALL wrf_debug ( 150 , wrf_err_message )
real_nmm.F:   CALL       wrf_debug ( 100 , 'real_nmm: calling init_modules ' )
real_nmm.F:   CALL set_wrf_debug_level ( debug_level )
real_nmm.F:   CALL  wrf_debug ( 100 , 'real_nmm: calling alloc_and_configure_domain ' )
real_nmm.F:   CALL wrf_debug ( 100 , 'real_nmm: calling set_scalar_indices_from_config ' )
real_nmm.F:   CALL     wrf_debug ( 100 , 'real_nmm: calling model_to_grid_config_rec ' )
real_nmm.F:   CALL       wrf_debug ( 100 , 'real_nmm: calling init_wrfio' )
real_nmm.F:   CALL wrf_debug ( 100 , 'real_nmm: re-broadcast the configuration records' )
real_nmm.F:   CALL       wrf_debug (   0 , 'real_nmm: SUCCESS COMPLETE REAL_NMM INIT' )
real_nmm.F:       CALL wrf_debug ( 100 , wrf_err_message )
real_nmm.F:      CALL wrf_debug (100, 'med_sidata_input: call input_auxinput1_wrf')
real_nmm.F:         CALL  wrf_debug (100, 'med_sidata_input: call init_module_optional_input' )
real_nmm.F:      CALL wrf_debug ( 100 , 'med_sidata_input: calling optional_input' )
real_nmm.F:         CALL  wrf_debug (100, 'med_sidata_input: call init_module_optional_input' )
real_nmm.F:      CALL wrf_debug ( 100 , 'med_sidata_input: calling init_domain' )
real_nmm.F:      CALL wrf_debug ( 100 , 'med_sidata_input: back from init_domain' )
real_nmm.F:  external get_wrf_debug_level
real_nmm.F:  call get_wrf_debug_level(debug)
real_nmm.F:        CALL wrf_debug(10,message)
real_nmm.F:          CALL wrf_debug(10,message)
real_nmm.F:     call wrf_debug(1,'LOOP>1, so start making non-init boundary conditions')
real_nmm.F:        call wrf_debug(1,'ALLOCATE PREP_HYBRID BOUNDARY ARRAYS')
real_nmm.F:                 call wrf_debug(10,message)
real_nmm.F:                 call wrf_debug(10,message)
real_nmm.F:                    call wrf_debug(1,message)
real_nmm.F:              call wrf_debug(10,message)
real_nmm.F:                    call wrf_debug(10,message)
real_nmm.F:                    call wrf_debug(10,message)
real_nmm.F:                 call wrf_debug(10,message)
real_nmm.F:                       call wrf_debug(10,message)
real_nmm.F:                       call wrf_debug(10,message)
real_nmm.F:                    call wrf_debug(10,message)
real_nmm.F:                       call wrf_debug(10,message)
real_nmm.F:                       call wrf_debug(10,message)
real_nmm.F:                    call wrf_debug(10,message)
real_nmm.F:        call wrf_debug(10,message)
real_nmm.F:        call wrf_debug(10,message)
real_nmm.F:          CALL wrf_debug(10,message)
real_nmm.F:     call wrf_debug(1,'DEALLOCATE PREP_HYBRID BOUNARY ARRAYS')
tc_em.F:   CALL       wrf_debug ( 100 , 'real_em: calling init_modules ' )
tc_em.F:   CALL set_wrf_debug_level ( debug_level )
tc_em.F:   CALL       wrf_debug ( 100 , 'real_em: calling alloc_and_configure_domain ' )
tc_em.F:         CALL       wrf_debug ( 100 , 'tc_em: calling set_scalar_indices_from_config ' )
tc_em.F:         CALL       wrf_debug ( 100 , 'tc_em: calling model_to_grid_config_rec ' )
tc_em.F:         CALL       wrf_debug ( 100 , 'tc_em: calling init_wrfio' )
tc_em.F:         CALL       wrf_debug ( 100 , 'tc_em: re-broadcast the configuration records' )
tc_em.F:         CALL       wrf_debug ( 100 , 'calling tc_med_sidata_input' )
tc_em.F:         CALL       wrf_debug ( 100 , 'backfrom tc_med_sidata_input' )
tc_em.F:   CALL       wrf_debug (   0 , 'tc_em: SUCCESS COMPLETE TC BOGUS' )
tc_em.F:      CALL wrf_debug ( 100 , wrf_err_message )
tc_em.F:      CALL wrf_debug ( 100 , 'med_sidata_input: calling input_auxinput1' )
tc_em.F:      CALL wrf_debug( 0, wrf_err_message )
tc_em.F:      CALL       wrf_debug ( 100 , 'med_sidata_input: calling init_module_optional_input' )
tc_em.F:      CALL       wrf_debug ( 100 , 'med_sidata_input: calling optional_input' )
tc_em.F:      CALL wrf_debug( 0, wrf_err_message )
tc_em.F:      CALL wrf_debug( 0, wrf_err_message )
wrf_ESMFMod.F:     CALL wrf_debug( 500, 'DEBUG wrf_component_init1():  before wrf_findCouplingInterval' )
wrf_ESMFMod.F:     CALL wrf_debug( 500, 'DEBUG wrf_component_init1():  after wrf_findCouplingInterval' )
wrf_ESMFMod.F:     CALL wrf_debug( 100, 'DEBUG wrf_component_init1():  couplingInterval = '//TRIM(couplingIntervalString) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100, 'wrf_component_init2():  begin' )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:         CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:         CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100, 'DEBUG wrf_component_init2():  end' )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , 'DEBUG wrf_component_run():  begin' )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , 'DEBUG wrf_component_run():  calling wrf_run()' )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , 'DEBUG wrf_component_run():  back from wrf_run()' )
wrf_ESMFMod.F:     CALL wrf_debug ( 100 , 'DEBUG wrf_component_run():  end' )
wrf_ESMFMod.F:       call wrf_debug ( 1, 'WARNING:  ESMF coupling not used in this WRF run' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug    ( 100, 'subroutine sst_component_init1: find time_loop_max' )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:       CALL wrf_debug ( 0 , TRIM(str) )
wrf_SST_ESMF.F:       CALL wrf_debug ( 0 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 5 , 'DEBUG sst_component_init2:  Calling ioesmf_create_grid_int()' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 5 , 'DEBUG sst_component_init2:  back from ioesmf_create_grid_int()' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 5 , 'DEBUG sst_component_init2:  Calling ESMF_GridValidate(esmfgrid)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 5 , 'DEBUG sst_component_init2:  back OK from ESMF_GridValidate(esmfgrid)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: calling ESMF_FieldCreate(out_sst_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: back from ESMF_FieldCreate(out_sst_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: calling ESMF_FieldCreate(out_landmask_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: back from ESMF_FieldCreate(out_landmask_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: calling ESMF_FieldCreate(in_sst_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: back from ESMF_FieldCreate(in_sst_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: calling ESMF_FieldCreate(in_landmask_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, 'sst_component_init2: back from ESMF_FieldCreate(in_landmask_field)' )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100, TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100, TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:          CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:          CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:          CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:          CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:          CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:!5.2.0r          CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:            CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:        CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:      CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:   ! Note:  wrf_debug and wrf_error_fatal are not initialized yet
wrf_SST_ESMF.F:   ! Note:  wrf_debug and wrf_error_fatal are now initialized
wrf_SST_ESMF.F:   CALL wrf_debug( 100, 'wrf_SST_ESMF:  couplingInterval = '//TRIM(couplingIntervalString) )
wrf_SST_ESMF.F:   CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:   CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:   CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:   CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:     CALL wrf_debug ( 100 , TRIM(str) )
wrf_SST_ESMF.F:   CALL wrf_debug ( 100 , TRIM(str) )
